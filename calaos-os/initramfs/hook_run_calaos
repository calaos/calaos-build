#!/usr/bin/ash

find_dev_by_path () {
    local path="${1}"
    local tmp_mnt=/tmp_mnt
    local _mnt
    local a d
    local device

    [[ "$path" ]] || return 1

    mkdir -p "${tmp_mnt}"

    for a in 1 2 3; do
        for d in $(awk '{ print "/dev/"$4 }' /proc/partitions); do

            # If the device is already mounted, it shouldn't be
            # unmounted after the check.

            grep -q "^$d " /proc/mounts && {
                _mnt=$(grep "^$d " /proc/mounts | cut -d ' ' -f 2)
                unmount=
            } || {
                mount -r -t auto "${d}" "${tmp_mnt}" 2> /dev/null || continue
                _mnt="${tmp_mnt}"
                unmount=true
            }

            # File exists in $d. Save $d on $device.

            [[ -f "${_mnt}/${path}" ]] && device="${d}"
            [[ "${unmount}" ]] && umount "${tmp_mnt}" 2> /dev/null || true
            [[ "${device}" ]] && {
                echo "${device}"
                return
            }

        done
        sleep 1
    done
    return 1
}

# args: device, mountpoint, flags, opts
_mnt_dev() {
    local dev="${1}"
    local mnt="${2}"
    local flg="${3}"
    local opts="${4}"

    mkdir -p "${mnt}"

    msg ":: Mounting '${dev}' to '${mnt}'"

    while ! poll_device "${dev}" 30; do
        echo "ERROR: '${dev}' device did not show up after 30 seconds..."
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    done

    if mount -o "${opts}" "${flg}" "${dev}" "${mnt}"; then
        msg ":: Device '${dev}' mounted successfully."
    else
        echo "ERROR; Failed to mount '${dev}'"
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    fi
}

run_hook() {
    if [ "$LABEL" = "live" ] || [ "$LABEL" = "live-efi" ]
    then
        [[ -z "${img_file}" ]] && img_file=".calaos-live"
        [[ -z "${img_flags}" ]] && img_flags="defaults"

        msg ":: Entering Calaos OS Hook"

        msg ":: Searching live rootfs"
        rootfs_dev=$(find_dev_by_path "${img_file}")

        if [[ "$rootfs_dev" ]]
        then
            msg ":: Found rootfs on device: $rootfs_dev"
            mount_handler="calaos_live_loop_mount_handler"
        fi
    fi
}

# args: new_root
calaos_live_loop_mount_handler () {
    newroot="${1}"

    _mnt_dev "${rootfs_dev}" "${newroot}" "-w" "defaults"
}
